using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Configuration;
using System.Threading;
using System.Data;
using SevenZip;
using System.Reflection;
using AvauntGuard.MalwareDataConsolidator.Lib.Services;

namespace AvauntGuard.MalwareDataConsolidator.UI
{
    public class Program
    {
        const string baseLocation = @"C:\Downloads";

        static void Main(string[] args)
        {
            Console.WriteLine("Started");
            DownloadFiles(true);
            //DoTest();
            Console.WriteLine("Finished");
        }

        private static bool Decompress(string fileName, string targetFile, string archiveName)
        {
            bool retCode = false;
            SevenZipCompressor.SetLibraryPath(@"C:\Program Files\7-Zip\7z.dll");

            try
            {
                using (FileStream inputStream = new FileStream(fileName, FileMode.Open))
                {
                    if (File.Exists(targetFile))
                        File.Delete(targetFile);

                    using (FileStream outputStream = new FileStream(targetFile, FileMode.CreateNew, FileAccess.ReadWrite))
                    {
                        SevenZip.SevenZipExtractor decompressor = new SevenZip.SevenZipExtractor(inputStream);
                        decompressor.ExtractFile(archiveName, outputStream);
                        retCode = true;
                    }
                }
            }
            catch (Exception ex) { }

            return retCode;
        }

        private static void DoTest()
        {
            // MalwareDataConsolidatorService.Singleton.DownloadFile("http://www.malwaredomainlist.com/mdlcsv.php", baseLocation + @"\malware_domain_list.csv");

            MalwareDataConsolidatorService.Singleton.ReadStream(baseLocation + @"\malware_domain_list.csv", "127.{0}.3.{1}");


        }

        private static void DownloadFiles(bool doWork)
        {
            bool retCode = false;
            int recordsParsed = 0;

            if (!Directory.Exists(baseLocation))
                Directory.CreateDirectory(baseLocation);

            StringBuilder sb = new StringBuilder();

            sb.AppendLine("<font>=========================================<br/>");
            sb.AppendLine(String.Format("= Malware parsing started at : {0}.<br/>", DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt")));
            sb.AppendLine("=========================================<br/>");

            if (doWork)
            {
                //try
                //{
                //    // IN PROGRESS
                //    retCode = MalwareDataConsolidatorService.Singleton.DownloadFile("http://rlwpx.free.fr/WPFF/hrsk.7z", baseLocation + @"\hr.7z");

                //    if (retCode)
                //        retCode = Decompress(baseLocation + @"\hr.7z", baseLocation + @"\hr.txt", "Hosts.rsk");
                //    else
                //        sb.AppendLine(string.Format("= RLWPX Malware status\t\t : {0}.<br/>", "Could not decompress."));

                //    if (retCode)
                //    {
                //        MalwareDataConsolidatorService.Singleton.ParseRecords(baseLocation + @"\hr.txt", "127.{0}.1.{1}", "Malware", "", "rlwpx.free.fr", out recordsParsed, '\t', -1, 1, "#");
                //        sb.AppendLine(string.Format("= RLWPX Malware status\t\t : {0}.<br/>", "OK"));
                //    }
                //    else
                //        sb.AppendLine(string.Format("= RLWPX Malware status\t\t : {0}.<br/>", "Could not parse."));
                //}
                //catch (Exception ex) { sb.AppendLine(string.Format("= RLWPX Malware status\t\t : {0}.<br/>", ex.ToString())); }

                try
                {
                    // DONE
                    retCode = MalwareDataConsolidatorService.Singleton.DownloadFile("http://mirror1.malwaredomains.com/files/domains.txt", baseLocation + @"\malware_domains.txt");
                    if (retCode)
                        MalwareDataConsolidatorService.Singleton.ParseRecords(baseLocation + @"\malware_domains.txt", "127.{0}.2.{1}", "Malware", "", "malwaredomains.com", out recordsParsed, '\t', 2, 3);

                    sb.AppendLine(string.Format("= Malware Domain status\t\t : {0}.<br/>", "OK"));
                }
                catch (Exception ex) { sb.AppendLine(string.Format("= Malware Domain status\t\t : {0}.<br/>", ex.ToString())); }

                try
                {
                    // DONE
                    retCode = MalwareDataConsolidatorService.Singleton.DownloadFile("http://www.malwaredomainlist.com/mdlcsv.php", baseLocation + @"\malware_domain_list.csv");
                    if (retCode)
                    {
                        MalwareDataConsolidatorService.Singleton.ReadStream(baseLocation + @"\malware_domain_list.csv", "127.{0}.3.{1}");
                        sb.AppendLine(string.Format("= Malware Domain List status\t\t : {0}.<br/>", "OK"));
                    }
                    else
                        sb.AppendLine(string.Format("= Malware Domain List status\t\t : {0}.<br/>", "Download KO"));
                }
                catch (Exception ex) { sb.AppendLine(string.Format("= Malware Domain List status\t\t : {0}.<br/>", ex.ToString())); }

                try
                {
                    // DONE
                    retCode = MalwareDataConsolidatorService.Singleton.DownloadFile("http://amada.abuse.ch/blocklist.php?download=domainblocklist", baseLocation + @"\amanda_blocklist.txt");
                    if (retCode)
                        // JWI said to group under backdoor
                        MalwareDataConsolidatorService.Singleton.ParseRecords(baseLocation + @"\amanda_blocklist.txt", "127.{0}.4.{1}", "Backdoor", "", "amada.abuse.ch", out recordsParsed, '#', -1, 1);

                    sb.AppendLine(string.Format("= Amanda abuse status\t\t : {0}.<br/>", "OK"));
                }
                catch (Exception ex) { sb.AppendLine(string.Format("= Amanda abuse status\t\t : {0}.<br/>", ex.ToString())); }

                try
                {
                    // DONE
                    retCode = MalwareDataConsolidatorService.Singleton.DownloadFile("https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist", baseLocation + @"\zeus_blocklist.txt");
                    if (retCode)
                    {
                        MalwareDataConsolidatorService.Singleton.ParseRecords(baseLocation + @"\zeus_blocklist.txt", "127.{0}.5.{1}", "Malware", "abuse.ch ZeuS domain blocklist", "zeustracker.abuse.ch", out recordsParsed, '#', -1, 1);
                        sb.AppendLine(string.Format("= Zeus tracker status\t\t : {0}.<br/>", "OK"));
                    }
                    else
                        sb.AppendLine(string.Format("= Zeus tracker status\t\t : {0}.<br/>", "KO"));
                }
                catch (Exception ex) { sb.AppendLine(string.Format("= Zeus tracker status\t\t : {0}.<br/>", ex.ToString())); }

                try
                {
                    // DONE
                    retCode = MalwareDataConsolidatorService.Singleton.DownloadFile("http://amada.abuse.ch/blocklist.php?download=ipblocklist", baseLocation + @"\amanda_ipblocklist.txt");
                    if (retCode)
                        MalwareDataConsolidatorService.Singleton.ParseRecords(baseLocation + @"\amanda_ipblocklist.txt", "127.2.4.192|127.{0}.4.{1}", "backdoor", "", "amanda.abuse.ch", out recordsParsed, '#', -1, 1);

                    sb.AppendLine(string.Format("= Amanda blocklist status\t\t : {0}.<br/>", "OK"));
                }
                catch (Exception ex) { sb.AppendLine(string.Format("= Amanda blocklist status\t\t : {0}.<br/>", ex.ToString())); }

                try
                {
                    // DONE
                    retCode = MalwareDataConsolidatorService.Singleton.DownloadFile("http://www.malware.com.br/cgi/submit?action=list_xml", baseLocation + @"\malware_patrol.xml");
                    if (retCode)
                    {
                        MalwareDataConsolidatorService.Singleton.ReadXML(baseLocation + @"\malware_patrol.xml", "2", "127.{0}.6.{1}");
                        sb.AppendLine(string.Format("= Malware patrol status\t\t : {0}.<br/>", "OK"));
                    }
                    else
                        sb.AppendLine(string.Format("= Malware patrol status\t\t : {0}.<br/>", "Download KO"));
                }
                catch (Exception ex) { sb.AppendLine(string.Format("= Malware patrol status\t\t : {0}.<br/>", ex.ToString())); }

                try
                {
                    // DONE
                    retCode = MalwareDataConsolidatorService.Singleton.DownloadFile("http://data.phishtank.com/data/online-valid.xml", baseLocation + @"\phishtank.xml");
                    if (retCode)
                    {
                        MalwareDataConsolidatorService.Singleton.ReadXML(baseLocation + @"\phishtank.xml", "127.{0}.7.{1}");
                        sb.AppendLine(string.Format("= Phishtank status\t\t : {0}.<br/>", "OK"));
                    }
                    else
                        sb.AppendLine(string.Format("= Phishtank status\t\t : {0}.<br/>", "KO"));
                }
                catch (Exception ex) { sb.AppendLine(string.Format("= Phistank status\t\t : {0}.<br/>", ex.ToString())); }

                try
                {
                    // DONE
                    retCode = MalwareDataConsolidatorService.Singleton.DownloadFile("http://cgi.mtc.sri.com/download/malware_dns/09-13-2011/Get_Top-100_30-Day_WatchList.html", baseLocation + @"\top100_30days.txt");
                    if (retCode)
                    {
                        MalwareDataConsolidatorService.Singleton.ParseRecords(baseLocation + @"\top100_30days.txt", "127.{0}.8.{1}", "Malware", "", "cgi.mtc.sri.com", out recordsParsed, '|', -1, 1);
                        sb.AppendLine(string.Format("= cgi.mtc.sri.com status\t\t : {0}.<br/>", "OK"));
                    }
                    else
                        sb.AppendLine(string.Format("= cgi.mtc.sri.com status\t\t : {0}.<br/>", "KO"));
                }
                catch (Exception ex) { sb.AppendLine(string.Format("= cgi.mtc.sri.com status\t\t : {0}.<br/>", ex.ToString())); }

                try
                {
                    // DONE
                    retCode = MalwareDataConsolidatorService.Singleton.DownloadFile("http://www.brandsafenetwork.com/malware-urls/4122_urls.txt", baseLocation + @"\4122_urls.txt");
                    if (retCode)
                    {
                        MalwareDataConsolidatorService.Singleton.ParseRecords(baseLocation + @"\4122_urls.txt", "127.{0}.9.{1}", "Malware", "", "www.brandsafenetwork.com", out recordsParsed, '|', -1, 1);
                        sb.AppendLine(string.Format("= brandsafenetwork status\t\t : {0}.<br/>", "OK"));
                    }
                    else
                        sb.AppendLine(string.Format("= brandsafenetwork status\t\t : {0}.<br/>", "KO"));
                }
                catch (Exception ex) { sb.AppendLine(string.Format("= brandsafenetwork status\t\t : {0}.<br/>", ex.ToString())); }
            }

            try
            {
                sb.AppendLine("=========================================<br/>");
                sb.AppendLine(String.Format("= Malware parsing completed at : {0}.<br/>", DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt")));
                sb.AppendLine("=========================================</font>");

                Console.WriteLine("Sending status report ...");
                MailService.SendMail(ConfigurationSettings.AppSettings["EmailWebMaster"], ConfigurationSettings.AppSettings["RSSClient"], String.Format("RSS Stats for {0}", DateTime.Now.ToString("yyyy-MM-dd")), sb.ToString());
            }
            catch (Exception ex)
            {
                Console.WriteLine("Mail send error " + ex.ToString());
                // Sleep so we can read the output
                Thread.Sleep(120000);
            }
        }
    }
}
